<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Marine Data Science</title>
    <link>/</link>
    <description>Recent content on Marine Data Science</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 - present [Saskia Otto](https://github.com/saskiaotto)</copyright>
    <lastBuildDate>Sun, 28 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Run Shiny Server on your own DigitalOcean droplet - Part 1</title>
      <link>/blog/2019/04/28/run-shiny-server-on-your-own-digitalocean-droplet-part-1/</link>
      <pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/04/28/run-shiny-server-on-your-own-digitalocean-droplet-part-1/</guid>
      <description>Do you also like shiny apps and would like to host more than 5 apps as currently permitted at shinyapps.io? Than the solution might be to run your own shiny server using any (virtual) server. In the following I will describe step-by-step how I set up my own Shiny as well as Rstudio Server using Digital Ocean.
At the university I already use Rstudio Server extensively in my stats courses, which runs on a physical server at my research institute.</description>
    </item>
    
    <item>
      <title>Run Shiny Server on your own DigitalOcean droplet - Part 2</title>
      <link>/blog/2019/04/28/run-shiny-server-on-your-own-digitalocean-droplet-part-2/</link>
      <pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/04/28/run-shiny-server-on-your-own-digitalocean-droplet-part-2/</guid>
      <description>This 2nd part will cover the installation of R, RStudio and the Shiny Server and is based on R’s Ubuntu packages for R tutorial, the DigitalOcean manual, RStudio’s RStudio Server and Shiny Server guides, and Dean Attali’s great blog post.

Table of Contents - Part 2  Step 8: Some preparations Step 9: Install R and packages  9.1 R 9.2 R Packages  Step 10: Install RStudio Server Step 11: Install and configure Shiny Server  11.</description>
    </item>
    
    <item>
      <title>Linking 2 computers to 2 GitHub accounts</title>
      <link>/blog/2019/04/24/linking-2-github/</link>
      <pubDate>Wed, 24 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/04/24/linking-2-github/</guid>
      <description>If you have only one GitHub account and work with a single computer you will find plenty of information in the internet on how to link your machine to your account. Also, if you want to set up a secure SSH protocol to connect your computer to GitHub so that you don’t have to supply your username or password at each visit, a good starting point is the Connecting to GitHub with SSH documentation on the GitHub help pages or take a look at some of the many blogs, e.</description>
    </item>
    
    <item>
      <title>Helpful Shiny apps</title>
      <link>/blog/2019/01/16/helpful-shiny-apps/</link>
      <pubDate>Wed, 16 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/01/16/helpful-shiny-apps/</guid>
      <description>Last updated: May 01, 2019 If you are an R user but don’t know yet what Shiny and Shiny apps are, you definitely should read up on it on https://shiny.rstudio.com.
But in a nutshell, Shiny is an R package that builds interactive web apps straight from R. You just need to write an R script that follows a specific Shiny syntax and once you run the script, the package builds a HTML file as user interface (UI) with interactive input elements (based on Javascript) that trigger certain computations in R.</description>
    </item>
    
    <item>
      <title>oce package for oceanographical data</title>
      <link>/blog/2019/01/16/oce-package-for-oceanographical-data/</link>
      <pubDate>Wed, 16 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/01/16/oce-package-for-oceanographical-data/</guid>
      <description>In this post I will present the oce package, which can be handy for marine data scientist working with oceanographical data. oce provides lots of functions to
 read oceanographic data, process the data specific to the measuring instrument, and visualize results following oceanographic conventions (using the base graphics).  The key function for importing data into R is ?read.oce(), which automatically recognizes the file type. If the recognition does not work, try the individual functions (e.</description>
    </item>
    
    <item>
      <title>How to normalize the RMSE</title>
      <link>/blog/2019/01/07/normalizing-the-rmse/</link>
      <pubDate>Mon, 07 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/01/07/normalizing-the-rmse/</guid>
      <description>This post has been stimulated by a discussion with a colleague who asked about the normalization method for the root mean square error (NRMSE) in the INDperform R package, which is based on the indicator testing framework outlined in my article (Otto et al. 2018)1. At the time of writing the article and package I simply used a common approach and didn’t test it much further. But sparked by this discussion I started to test it thoroughly (as you will see below), which will make me revise the package.</description>
    </item>
    
    <item>
      <title>Release indicator package INDperform</title>
      <link>/blog/2019/01/07/release-indicator-package-indperform/</link>
      <pubDate>Mon, 07 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/01/07/release-indicator-package-indperform/</guid>
      <description>INDperform  Overview INDperform is an R package that implements a quantitative framework for selecting and validating the performance of state indicators tailored to meet regional conditions and specific management needs as described in Otto et al. (2018) 1 (see also my post on indicators).
The package builds upon the tidy data principles and offers functions to
 identify temporal indicator changes, model relationships to pressures while taking non-linear responses and temporal autocorrelation into account, and to quantify the robustness of these models.</description>
    </item>
    
    <item>
      <title>Testing indicator performance</title>
      <link>/blog/2018/10/16/testing-indicator-performance/</link>
      <pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/10/16/testing-indicator-performance/</guid>
      <description>Indicators are useful and versatile tools applied in disciplines such as engineering, chemistry, medicine, economy or sociology. In ecosystem-based management a key role of an indicator is to inform on the current status of the system component as well as the effectiveness of specific management measures to move the component into a different state. In European Union (EU) marine policy, indicator development has recently progressed as part of the implementation of the Marine Strategy Framework Directive (MSFD)1 to aid the achievement of Good Environmental Status (GES) of the EU’s marine waters by 2020.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>I am a postdoctoral researcher and lecturer at the Institute of Marine Ecosystem and Fishery Science (formerly known as Institute for Hydrobiology and Fisheries Sciences). I have been working in the field of marine and freshwater ecology since my academic studies as researcher or consultant with a broad focus ranging from fish ecophysiology, diversity of marine temperate fouling communities, management of coral reefs and impacts of heavy metal pollution in the tropics to temperate freshwater fish communities and brackish pelagic food webs in recent years.</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/contact/</guid>
      <description>Any comments or questions? Are you curious about something? Do you have any questions? Let me know and I will try to answer them. If you have any information on interesting data bases or R packages I should add to the list, let me know. And if you have any tutorial or online course related to MDS that you would like to share through this platform you are more then welcome!</description>
    </item>
    
    <item>
      <title>Databases &amp; Data Packages</title>
      <link>/data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/data/</guid>
      <description>Last update: 2019, Jan. 7 Databases In the following you find a list of databases and repositories that provide different type of marine data for specific regions free of charge. The list is not intended to be exhaustive but more to give you an easy start and many of these database can be webscraped directly from within R using specific packages that I also list here. If you feel there is any global or regional database missing where users can download marine data, don’t hesitate to contact me!</description>
    </item>
    
    <item>
      <title>Marine Data Science</title>
      <link>/mds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mds/</guid>
      <description>Last update: 2019, Jan. 7 What is Marine Data Science (MDS)? MDS is all about uncovering findings from marine data such as oceanographical data collected using both in situ methods and remote sensing. Typical parameters measured on-board relate to near-surface meteorological conditions (air temperature, wind speed, wind direction, cloudiness, etc.), sea surface conditions (e.g. sea surface temperature (SST), salinity, wave height, and wave direction) as well as subsurface water characteristics (vertical profiles of temperature, salinity, dissolved nutrients, ocean currents, or ocean bottom depth).</description>
    </item>
    
    <item>
      <title>Online Courses &amp; Tutorials</title>
      <link>/courses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/courses/</guid>
      <description>Last update: 2019, Jan. 7 
In addition to the blog tutorials you here find a list of external courses and tutorials on marine data science taught by me (on https://github.com/mareds) or colleagues.
General Courses Data Analysis With R: This is a course taught by me as part of the curriculum of the Master program MARSYS at the Institute of Marine Ecosystem and Fishery Science, University of Hamburg, Germany. The course can be used as a short-term (e.</description>
    </item>
    
    <item>
      <title>Software</title>
      <link>/software/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/software/</guid>
      <description>Last update: 2019, Jan. 7 Which programming languages should you learn for marine data science? First of all, there is no easy answer and no consensus either. Choosing from the broad range of programming languages the right one to invest time and effort learning it the next month or years is not trivial. It all boils down to what you plan to do with it and whether you want an open source program or can afford a license.</description>
    </item>
    
  </channel>
</rss>